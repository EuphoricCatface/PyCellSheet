Application Design Note
----

2024. 11. 24    First Draft
2024. 12. 01    Second Draft
2024. 12. 07    Third Draft
2024. 12. 14    Fourth Draft

0. Meta
  - The name of this app will be PyCellSheet.
  * It kinda sounds like Python sh!t
  - Introduction: A slightly more Pythonic spreadsheet, and a slightly more spreadsheet-like pyspread. A (hopefully) comfortable middle ground between the two.
  - It's made out of pyspread.
  - Its twist is that it's a bit closer to the conventional spreadsheet programs, rather than being purely pythonic.
  - It also tries to eliminate some of the implicit/invisible/nondeterministic/everything-in-global/spaghetti-ness from pyspread.
  - After these design notes get stabilized, I'll post these on some pyspread community and ask for some feedback, and how I should deal with program structures, re-branding and packaging automations.
1. Per-Sheet Initialization Script
  - You can import libraries and define per-sheet global variables here.
  - From the cells, you can refer to the global variables from the same sheet (or from another sheet, with the sheet reference notation).
  - The cells won't be able to modify the global variables, so take them as more like const or preprocessor macros in C/C++.
  - Imports / global variables per sheet will be separated via global dict supplied for exec() and eval()
  - From this init area, you can't refer to the cells, or global variables from other sheets.
  - This script is evaluated only when you issue an update.
  - The code for the last update is buffered until the next update, and will be saved in the document
  - The draft will be discarded on the app exit, will not be saved into the document, and the app will give a warning if there is one when saving / exiting
  - Existing pyspread's section of [macros] in the document file is positioned at the end of the file.
  * This is probably in order to avoid dealing with escaping
  - Our [init-script] sections will be multiple, depending on the sheet count.
  * The escaping issue will be solved by having line count at the end of the section specifier; e.g. `[init-script:Sheet 1] 30`
  * These init-script section names are also where the sheet names are stored.
  - This script will, by default, also contain the seed for random, (LATER_GOAL [see topic 6] : so that random won't evaluate differently each run.)
  - After evaluating the init script, the variables/imports are stored into a dict ({sheetname: global_dict}) to be used by the "Reference Parser" and "Python Evaluator"(introduced later)
  - If there are global variables/function names that look like cell names, you get a warning.
2. Functions / Libraries
  - The functions for the expressions will be provided via imports in the per-sheet init script, including the basic ones.
  - Importing libraries inside a cell locally is also allowed.
  - from PyCellSheet.math import *; from PyCellSheet.date import *; from PyCellSheet.finance import *.finance; ...
  - Don't like/want the functions provided? Well you can just not import them!
  - If you also want the functions organized in a more pythonic way, you can just edit the import statements like `from PyCellSheet import math`.
  - The names of the provided functions are in uppercase. Otherwise, the Python built-ins like sum() will be overwritten.
  - The provided functions might be more pythonic rather than being true to the conventional spreadsheet functions.
  * `NOW()` is an alias to `datetime.datetime.now()`.
  * `DAYS()` accepts only `datetime.datetime` (or even a `datetime.timedelta`, instead of two `datetime.datetime`s!), and not `str`.
  - Other than provided spreadsheet-like functions, `from LIBRARY import *` is discouraged.
  - LATER_GOAL: You can also create your own functions. A workbook will have one script for custom functions, and it will be able to be imported by the init scripts. It can be modified, exported, imported, and merged as text files.
  - LATER_GOAL: If you have duplicate function names in the imports, you get a warning.
3. Cell Evaluation Pipeline
  - Cell Contents is whatever the user typed into the cell.
  - Expression Parser detects whether the contents is code to be further evaluated, or another type that doesn't need to go through the pipeline.
  - Reference Parser detects the cell references and sheet references, and makes them available for the evaluation.
  - Python Evaluator evaluates the input string as Python expressions and returns a Result, a Python object
  - Formatter gets a Python object, and produces a string to display for the cell.
  - The whole pipeline can be visualized like this:
    (Oops, sorry for the small font size!)
      Cell                                                                    Cell                             Cell
    Contents --[ Expression ]--> --[ Reference ]--> --[   Python  ]-->       Result      --[Formatter]-->  Representation
      (str)    [   Parser   ]      [   Parser  ]      [ Evaluator ]     (Python object)                       (str)

4. Expression Parser
  - Thanks to Garmy for the suggestion which eventually became this Expression Parser.
  - The Expression Parser is customizable per sheet.
  - The Expression Parser gets the argument `cell`, the Cell Contents copied, in string.
  - And it returns a Python object or a PyCellSheet.???.PythonCode type object, which is a subclass of str.
  - If the return type is not PythonCode, then it is immediately the Result.
  - A PythonCode type object bypassing the rest of the evaluation pipeline is not possible.
  - If needed, you should be able to write/generate a code that evaluates to be a PythonCode after the pipeline.
  - There's an additional, invisible Expression Parser before the main one, that immediately evaluates an empty cell, and returns PyCellSheet.???.EmptyCell constant, which is a PyCellSheet.???.EmptyCellType type object.
  * This makes not ignoring None easier, and also hopefully saves computation from evaluating None on empty cells.
  - EmptyCellType will have `__str__()` as "" and, `__int__()` and `__float__()` as zero, so that it will evaluate as an empty string / a zero in calculation context
  - Functions like `COUNTA()` and `AVERAGE()` will be able to detect EmptyCell and exclude them from evaluation.
  - A warning is made, if an EmptyCell is returned from the main Expression Parser. Making a cell with its contents hidden from sight is highly discouraged.
  - Four examples are provided for the users:
  * "Pure Pythonic" mode:
    	return PythonCode(cell)
  * "Mixed" mode:
        # Inspired by the spreadsheet string marker
        if cell.startswith('\''):
            return cell[1:]
        return PythonCode(cell)
  * "Reverse-mixed" mode:
        # Inspired by the python shell prompt `>>>`
        if cell.startswith(">"):
            return PythonCode(cell[1:])
        if cell.startswith('\''):
            cell = cell[1:]
        return cell
  * "Pure spreadsheet" mode:
        if cell.startswith("="):
            return PythonCode(cell[1:])
        try:
            return int(cell)
        except ValueError:
            pass
        try:
            return float(cell)
        except ValueError:
            pass
        if cell.startswith('\''):
            cell = cell[1:]
        return cell
  - The "Reverse-mixed" mode is the default and "Mixed" is the recommended, to balance between attracting less experienced people, and being pythonic.
  - The rationale is that if a not-tech-savvy first-timer tried out (supposedly) an office suite program, and then typing random stuff resulted in an error, then they would get frustrated and/or intimidated, and abandon the program soon.
  - Hopefully, after familiarization, they will feel "achieving something" by switching to the more "advanced" Mixed mode :3
  - MAYBE: replace PythonCode() with something like ref_resolve_and_eval(), that will execute Reference Parser and Python Evaluator, rather than having them outside the Evaluation Parser - I think I'd rather leave them separate though.
  - MAYBE_DITCH / FEATURE_CREEP? / LATER_GOAL: Some form of strings get detected, and the cell automatically gets edited to corresponding python types. This can be turned on/off in the preference.
5. Reference Parser
  - Each cell has an address, resembling spreadsheet ones.
  - The program will do a "preprocessor pass" of Reference Parser before the evaluation of each cell.
  - A cell reference expression will be wrapped with quotation marks (' or ") to make it a string, and then wrapped with a function call of `cell_ref()`.
  * Utilizing `ast` library was considered, but it turns out to not have much benefit than string manipulations.
  * PLY and Lark, custom grammar parser, are deemed not worth it because we will have to compile a whole lot of tiny code pieces on the sheet load / re-evaluation, rather than compiling big, complex code pieces few times and cache it.
  - This function, `cell_ref()`, can be explicitly written in the cell.
  - And maybe this way will be recommended, because explicit is (always? mostly?) good.
  - The range specifier colon(:) and sheet specifier exclamation mark(!) also will be supported.
  - Filename specifier square brackets([]) will not be supported for now.
  - Range specifier and sheet specifier can also be explicitly written as `cell_range_ref()` and `sheet_ref()`.
  - And the single-cell version of the function is `cell_single_ref()`.
  - There will be aliases `Sh()`, `R()`, `C()` for each of `sheet_ref()`, `cell_range_ref()`, and `cell_single_ref()`
  * Sh instead of S to avoid mixing up with existing pyspread's `S[0, 0, 0]` notation.
  - Sheet and cell reference can be chained like `Sh("Sheet 1").C("A1")`.
  - Also `CR()` is for `cell_ref()`, the catch-all for transforming str to combinations of `Sh()`, `C()`, `R()`.
  * This also enables things like `CR(CR("A1") + "!" + CR("A2"))` instead of `= INDIRECT(CONCATENATE(A1, "!", A2))`
  * Imagine A1 has "Sheet2" and A2 has "B3:C5".
  * This is more concise than the spreadsheet notation, and more flexible at the same time.
  - The result of the range expression/function will be of `PyCellSheet.???.Range` type that is a 2D list (LATER_GOAL: Implement more efficient and robust class in handling rectangular 2d array. 1d list with width info, I think), additionally with the top-left cell's name/coordinate.
  * This is because of the search functions and such.
  * The Range type will additionally have a method to return a 1D list that has all the elements.
  ** This will hopefully make it easier / faster to write / evaluate ones like sum() or average().
  - The return value of these reference functions will always be a deepcopy.
  * A1 `[1, 2, 5, 3, 4]`, A2 `A1.sort()` => A1 will stay the same, A2 will show `None`.
  * A1 `[1, 2, 5, 3, 4]`. A2 `a = A1; a.sort(); a` => A1 will stay the same, A2 will show the sorted list.
  - Reference Parser also takes care of referencing the global variables declared in the Per-Sheet Initialization Script of another sheet.
  * The "global variables" from the scripts will have been registered to the sheet object.
  * Global variables from the same sheet are to be supplied into the evaluator into the exec()/eval() via global dict arg.
  * If a keyword after sheet specifier `!` doesn't look like a cell reference, sheet_ref() will be chained with global_ref() instead.
6. Python Evaluator
  - LATER_GOAL: Before the Evaluation, `compile()` the code and cache it in the memory
  - LATER_GOAL: Implement dependency graph, and update chaining
  - LATER_GOAL: Circular ref detection
  - A cell can have a Result with the type of int, float, list, set, dict, str, bytes, or any python objects!
  - A statement is delimited with semicolons or line breaks.
  - No variables will be shared outside of a cell. Only the result can be referred to by the address.
  - As mentioned in the 5th topic, global variables from the same sheet are to be supplied into the evaluator into the exec()/eval() via global dict arg.
  - To prevent `random` from producing the same value for every cell, `random` is exempted from being deepcopied.
  - LATER_GOAL: Proper repeatable random will only be possible after the update chaining is implemented.
  - The code will be evaluated with an empty local dict supplied each time, to ensure it's evaluated inside its own local scope.
  * Like how you're recommended to make a main() in a standalone script.
  - PyCellSheet.???.RangeOutput will enable ranged output, like `SORT()` and `UNIQUE()`. (TODO: figure out how they would write into the Results of other cells)
  - TODO: Figure out how to evaluate things like `FILTER(A2:C6, ISBLANK(C2:C6))` or `COUNTIF()`. There has to be some clever uses of lambda functions, or built-in functions like map() or zip()
  - The result of the last statement in the cell will become the Result of the cell.
  * That is, mostly like how REPL (the python shell) shows you back the calculation results (except `None` doesn't get ignored).
  * That also means, if you have an assignment as the last statement, the cell will only show  ̶a̶ ̶`̶N̶o̶n̶e̶`̶  an error
  * Though, why would you need that?? I said no variables will be shared anyways!
7. Formatter
  - Formatter is a function, gets an argument `result`, returns a string.
  - Formatter evaluates the Result if it recognizes the type, else applies str().
  - It's also editable by the user, like Expression Parser, but it has per-sheet scope and per-cell scope.
  - For a sheet, Formatter has basically a bunch of `if isinstance(result, [TYPE/CLASS]):; return ...` clauses with `return str(result)` at the end.
  - This can also be implemented with match ~ case with "class patterns".
  - For a cell, Formatter is usually a single `if isinstance(result, [TYPE/CLASS]):; return ...; else raise pyspread.???.FormatterError`.
  - Example presets will be provided for popular types, like conventional spreadsheets do.
  - This way, you can have different representations for each cell for e.g. `datetime.datetime`.
  - Any formatting resulting in an empty/whitespace-only string makes a warning, unless the cell is empty. Making a cell with its expression hidden from sight is highly discouraged.
  - If needed, showing "_" instead is encouraged.
  - Hiding the result by setting the background and text color the same is not prevented by this design, however.
  - For an error/exception, display the exception name in the cell (i.e. "KeyError"), and show details in the tooltip (str() formatted, i.e. "Key not found in the dict", and possibly traceback as well).
  - For a non-error/exception, display the formatted string in the cell and show type in the tooltip.
  - If warning, show a red dot on the top left corner of the cell.
  - Throughout the evaluation pipeline, a list will be available via a function. On warning, you can append a string into the list.
TODO:
  - MAYBE / FEATURE_CREEP?: Figure out cell handle dragging
  - For now, pyspread syntax is preserved, but it may be purged if needed
  - If it doesn't, then toggling the headers between spreadsheet / pyspread mode will need to be implemented.
  - While "frozen cell" doesn't look very interesting, "generator cell" does. Look into it more later.
